# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ExportacaoItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pais: str=None, ano: int=None, quantidade: int=None, valor: int=None):  # noqa: E501
        """ExportacaoItem - a model defined in Swagger

        :param pais: The pais of this ExportacaoItem.  # noqa: E501
        :type pais: str
        :param ano: The ano of this ExportacaoItem.  # noqa: E501
        :type ano: int
        :param quantidade: The quantidade of this ExportacaoItem.  # noqa: E501
        :type quantidade: int
        :param valor: The valor of this ExportacaoItem.  # noqa: E501
        :type valor: int
        """
        self.swagger_types = {
            'pais': str,
            'ano': int,
            'quantidade': int,
            'valor': int
        }

        self.attribute_map = {
            'pais': 'pais',
            'ano': 'ano',
            'quantidade': 'quantidade',
            'valor': 'valor'
        }
        self._pais = pais
        self._ano = ano
        self._quantidade = quantidade
        self._valor = valor

    @classmethod
    def from_dict(cls, dikt) -> 'ExportacaoItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExportacaoItem of this ExportacaoItem.  # noqa: E501
        :rtype: ExportacaoItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pais(self) -> str:
        """Gets the pais of this ExportacaoItem.


        :return: The pais of this ExportacaoItem.
        :rtype: str
        """
        return self._pais

    @pais.setter
    def pais(self, pais: str):
        """Sets the pais of this ExportacaoItem.


        :param pais: The pais of this ExportacaoItem.
        :type pais: str
        """
        if pais is None:
            raise ValueError("Invalid value for `pais`, must not be `None`")  # noqa: E501

        self._pais = pais

    @property
    def ano(self) -> int:
        """Gets the ano of this ExportacaoItem.


        :return: The ano of this ExportacaoItem.
        :rtype: int
        """
        return self._ano

    @ano.setter
    def ano(self, ano: int):
        """Sets the ano of this ExportacaoItem.


        :param ano: The ano of this ExportacaoItem.
        :type ano: int
        """
        if ano is None:
            raise ValueError("Invalid value for `ano`, must not be `None`")  # noqa: E501

        self._ano = ano

    @property
    def quantidade(self) -> int:
        """Gets the quantidade of this ExportacaoItem.


        :return: The quantidade of this ExportacaoItem.
        :rtype: int
        """
        return self._quantidade

    @quantidade.setter
    def quantidade(self, quantidade: int):
        """Sets the quantidade of this ExportacaoItem.


        :param quantidade: The quantidade of this ExportacaoItem.
        :type quantidade: int
        """
        if quantidade is None:
            raise ValueError("Invalid value for `quantidade`, must not be `None`")  # noqa: E501

        self._quantidade = quantidade

    @property
    def valor(self) -> int:
        """Gets the valor of this ExportacaoItem.


        :return: The valor of this ExportacaoItem.
        :rtype: int
        """
        return self._valor

    @valor.setter
    def valor(self, valor: int):
        """Sets the valor of this ExportacaoItem.


        :param valor: The valor of this ExportacaoItem.
        :type valor: int
        """
        if valor is None:
            raise ValueError("Invalid value for `valor`, must not be `None`")  # noqa: E501

        self._valor = valor
