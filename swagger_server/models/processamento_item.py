# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProcessamentoItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, categoria: str=None, cultivar: str=None, ano: str=None, quantidade: str=None):  # noqa: E501
        """ProcessamentoItem - a model defined in Swagger

        :param categoria: The categoria of this ProcessamentoItem.  # noqa: E501
        :type categoria: str
        :param cultivar: The cultivar of this ProcessamentoItem.  # noqa: E501
        :type cultivar: str
        :param ano: The ano of this ProcessamentoItem.  # noqa: E501
        :type ano: str
        :param quantidade: The quantidade of this ProcessamentoItem.  # noqa: E501
        :type quantidade: str
        """
        self.swagger_types = {
            'categoria': str,
            'cultivar': str,
            'ano': str,
            'quantidade': str
        }

        self.attribute_map = {
            'categoria': 'categoria',
            'cultivar': 'cultivar',
            'ano': 'ano',
            'quantidade': 'quantidade'
        }
        self._categoria = categoria
        self._cultivar = cultivar
        self._ano = ano
        self._quantidade = quantidade

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessamentoItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProcessamentoItem of this ProcessamentoItem.  # noqa: E501
        :rtype: ProcessamentoItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categoria(self) -> str:
        """Gets the categoria of this ProcessamentoItem.


        :return: The categoria of this ProcessamentoItem.
        :rtype: str
        """
        return self._categoria

    @categoria.setter
    def categoria(self, categoria: str):
        """Sets the categoria of this ProcessamentoItem.


        :param categoria: The categoria of this ProcessamentoItem.
        :type categoria: str
        """
        if categoria is None:
            raise ValueError("Invalid value for `categoria`, must not be `None`")  # noqa: E501

        self._categoria = categoria

    @property
    def cultivar(self) -> str:
        """Gets the cultivar of this ProcessamentoItem.


        :return: The cultivar of this ProcessamentoItem.
        :rtype: str
        """
        return self._cultivar

    @cultivar.setter
    def cultivar(self, cultivar: str):
        """Sets the cultivar of this ProcessamentoItem.


        :param cultivar: The cultivar of this ProcessamentoItem.
        :type cultivar: str
        """
        if cultivar is None:
            raise ValueError("Invalid value for `cultivar`, must not be `None`")  # noqa: E501

        self._cultivar = cultivar

    @property
    def ano(self) -> str:
        """Gets the ano of this ProcessamentoItem.


        :return: The ano of this ProcessamentoItem.
        :rtype: str
        """
        return self._ano

    @ano.setter
    def ano(self, ano: str):
        """Sets the ano of this ProcessamentoItem.


        :param ano: The ano of this ProcessamentoItem.
        :type ano: str
        """
        if ano is None:
            raise ValueError("Invalid value for `ano`, must not be `None`")  # noqa: E501

        self._ano = ano

    @property
    def quantidade(self) -> str:
        """Gets the quantidade of this ProcessamentoItem.


        :return: The quantidade of this ProcessamentoItem.
        :rtype: str
        """
        return self._quantidade

    @quantidade.setter
    def quantidade(self, quantidade: str):
        """Sets the quantidade of this ProcessamentoItem.


        :param quantidade: The quantidade of this ProcessamentoItem.
        :type quantidade: str
        """
        if quantidade is None:
            raise ValueError("Invalid value for `quantidade`, must not be `None`")  # noqa: E501

        self._quantidade = quantidade
