# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProducaoItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, produto: str=None, ano: int=None, quantidade: int=None):  # noqa: E501
        """ProducaoItem - a model defined in Swagger

        :param produto: The produto of this ProducaoItem.  # noqa: E501
        :type produto: str
        :param ano: The ano of this ProducaoItem.  # noqa: E501
        :type ano: int
        :param quantidade: The quantidade of this ProducaoItem.  # noqa: E501
        :type quantidade: int
        """
        self.swagger_types = {
            'produto': str,
            'ano': int,
            'quantidade': int
        }

        self.attribute_map = {
            'produto': 'produto',
            'ano': 'ano',
            'quantidade': 'quantidade'
        }
        self._produto = produto
        self._ano = ano
        self._quantidade = quantidade

    @classmethod
    def from_dict(cls, dikt) -> 'ProducaoItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProducaoItem of this ProducaoItem.  # noqa: E501
        :rtype: ProducaoItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def produto(self) -> str:
        """Gets the produto of this ProducaoItem.


        :return: The produto of this ProducaoItem.
        :rtype: str
        """
        return self._produto

    @produto.setter
    def produto(self, produto: str):
        """Sets the produto of this ProducaoItem.


        :param produto: The produto of this ProducaoItem.
        :type produto: str
        """
        if produto is None:
            raise ValueError("Invalid value for `produto`, must not be `None`")  # noqa: E501

        self._produto = produto

    @property
    def ano(self) -> int:
        """Gets the ano of this ProducaoItem.


        :return: The ano of this ProducaoItem.
        :rtype: int
        """
        return self._ano

    @ano.setter
    def ano(self, ano: int):
        """Sets the ano of this ProducaoItem.


        :param ano: The ano of this ProducaoItem.
        :type ano: int
        """
        if ano is None:
            raise ValueError("Invalid value for `ano`, must not be `None`")  # noqa: E501

        self._ano = ano

    @property
    def quantidade(self) -> int:
        """Gets the quantidade of this ProducaoItem.


        :return: The quantidade of this ProducaoItem.
        :rtype: int
        """
        return self._quantidade

    @quantidade.setter
    def quantidade(self, quantidade: int):
        """Sets the quantidade of this ProducaoItem.


        :param quantidade: The quantidade of this ProducaoItem.
        :type quantidade: int
        """
        if quantidade is None:
            raise ValueError("Invalid value for `quantidade`, must not be `None`")  # noqa: E501

        self._quantidade = quantidade
